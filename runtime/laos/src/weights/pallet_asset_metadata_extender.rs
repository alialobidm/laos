
//! Autogenerated weights for `pallet_asset_metadata_extender`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-23, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `titan`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/laos
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=1
// --pallet=pallet_asset_metadata_extender
// --extrinsic=*
// --wasm-execution=compiled
// --output=./runtime/laos/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_asset_metadata_extender`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_asset_metadata_extender::WeightInfo for WeightInfo<T> {
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:0 w:1)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extend(_t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 42_906_000 picoseconds.
		Weight::from_parts(58_805_000, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 14_066
			.saturating_add(Weight::from_parts(20_371, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn precompile_update(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 46_019_000 picoseconds.
		Weight::from_parts(28_946_000, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 20_940
			.saturating_add(Weight::from_parts(33_345, 0).saturating_mul(t.into()))
			// Standard Error: 20_940
			.saturating_add(Weight::from_parts(45_685, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_balance_of(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3999`
		// Minimum execution time: 5_640_000 picoseconds.
		Weight::from_parts(10_608_000, 0)
			.saturating_add(Weight::from_parts(0, 3999))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_claimer_by_index(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166 + u * (2 ±0)`
		//  Estimated: `4035`
		// Minimum execution time: 18_596_000 picoseconds.
		Weight::from_parts(36_123_000, 0)
			.saturating_add(Weight::from_parts(0, 4035))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extension_by_index(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `312 + u * (3 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 22_431_000 picoseconds.
		Weight::from_parts(45_362_000, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			.saturating_add(T::DbWeight::get().reads(3))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extension_by_location_and_claimer(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `259 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 11_584_000 picoseconds.
		Weight::from_parts(18_722_000, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_has_extension_by_claimer(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 10_935_000 picoseconds.
		Weight::from_parts(21_617_000, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:0 w:1)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn create_token_uri_extension(_t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 41_250_000 picoseconds.
		Weight::from_parts(65_803_000, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 51_812
			.saturating_add(Weight::from_parts(63_943, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn update_token_uri_extension(_t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `155 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 31_606_000 picoseconds.
		Weight::from_parts(34_183_000, 0)
			.saturating_add(Weight::from_parts(0, 4545))
			// Standard Error: 4_451
			.saturating_add(Weight::from_parts(16_621, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
